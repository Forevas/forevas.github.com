<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>厚德载物，追求卓越</title>
  <subtitle>我的征途是星辰大海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://forevas.github.io/"/>
  <updated>2017-05-18T14:33:20.139Z</updated>
  <id>https://forevas.github.io/</id>
  
  <author>
    <name>Forevas</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈设计模式-Builder模式</title>
    <link href="https://forevas.github.io/2017/04/27/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Builder%E6%A8%A1%E5%BC%8F/"/>
    <id>https://forevas.github.io/2017/04/27/浅谈设计模式-Builder模式/</id>
    <published>2017-04-27T14:18:31.000Z</published>
    <updated>2017-05-18T14:33:20.139Z</updated>
    
    <content type="html"><![CDATA[<p>当我们去设计一个比较简单的类的构造方式时，一般情况下，直接重载几个不同参数的构造方法即可。但当类的成员变量比较多的时候，可能某些成员变量是必要的，某些又是可选的。有些是创建的时候需要传入的，有些又是对象创建完成之后才传的。这样的话重载构造方法的方式就会让人感到很迷茫，必须写一大堆注释来进行说明。这个时候，用Builder模式来进行对象的构建是十分合理的。<br><a id="more"></a><br>Builder模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>下面是标准Builder模式的类图。<br><img src="Builder.jpg" alt="Builder模式"><br>我们在实际使用中往往使用的是改造过的Builder模式，经常会省略掉Director,直接在代码中使用Builder模式来创建对象，在这里我们自己充当了Director的角色。下面自己来实现一个最简单的Builder模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">public class Person &#123;</div><div class="line">	private String id;</div><div class="line">	private String name;</div><div class="line">	private String sex;</div><div class="line">	private int age;</div><div class="line">	private String phoneNumber;</div><div class="line">	private String email;</div><div class="line">	private String address;</div><div class="line">	private String occupation;</div><div class="line"></div><div class="line">	private Person(Builder builder) &#123;</div><div class="line">		this.id = builder.id;</div><div class="line">		this.name = builder.name;</div><div class="line">		this.sex = builder.sex;</div><div class="line">		this.age = builder.age;</div><div class="line">		this.phoneNumber = builder.phoneNumber;</div><div class="line">		this.email = builder.email;</div><div class="line">		this.address = builder.address;</div><div class="line">		this.occupation = builder.occupation;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	static class Builder &#123;</div><div class="line">		private String id;</div><div class="line">		private String name;</div><div class="line">		private String sex;</div><div class="line">		private int age;</div><div class="line">		private String phoneNumber;</div><div class="line">		private String email;</div><div class="line">		private String address;</div><div class="line">		private String occupation;</div><div class="line"></div><div class="line">		public Builder(String id, String name, String sex, int age) &#123;</div><div class="line">			this.id = id;</div><div class="line">			this.name = name;</div><div class="line">			this.sex = sex;</div><div class="line">			this.age = age;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		public Builder setPhoneNumber(String phoneNumber) &#123;</div><div class="line">			this.phoneNumber = phoneNumber;</div><div class="line">			return this;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		public Builder setEmail(String email) &#123;</div><div class="line">			this.email = email;</div><div class="line">			return this;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		public Builder setAddress(String address) &#123;</div><div class="line">			this.address = address;</div><div class="line">			return this;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		public Builder setOccupation(String occupation) &#123;</div><div class="line">			this.occupation = occupation;</div><div class="line">			return this;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		public Person build() &#123;</div><div class="line">			return new Person(this);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class TestBuilder &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		Person person = new Person.Builder(&quot;xxx&quot;, &quot;Faker&quot;, &quot;man&quot;, 22)</div><div class="line">				.setAddress(&quot;Korea&quot;).setEmail(&quot;xxx@gmail.com&quot;)</div><div class="line">				.setOccupation(&quot;lol&quot;).setPhoneNumber(&quot;12345678901&quot;).build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子很直观的反映出了Builder模式的核心内容，当我们想要创建Person对象时，哪些参数是必须的，哪些是可选的，一目了然。而且链式的调用方式可读性更佳。<br>在Android中最常见的Builder模式就是AlertDialog了吧，在平时的编码中经常打交道。还有开源框架okhttp也大量使用了Builder模式，相信用过的人肯定深有感触。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们去设计一个比较简单的类的构造方式时，一般情况下，直接重载几个不同参数的构造方法即可。但当类的成员变量比较多的时候，可能某些成员变量是必要的，某些又是可选的。有些是创建的时候需要传入的，有些又是对象创建完成之后才传的。这样的话重载构造方法的方式就会让人感到很迷茫，必须写一大堆注释来进行说明。这个时候，用Builder模式来进行对象的构建是十分合理的。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://forevas.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式-单例模式</title>
    <link href="https://forevas.github.io/2017/04/20/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://forevas.github.io/2017/04/20/浅谈设计模式-单例模式/</id>
    <published>2017-04-20T14:29:47.000Z</published>
    <updated>2017-05-18T14:36:50.059Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间都没有写博客，感觉自己变懒了，这几天反省了一下，决定写点什么，想了想，准备写一下自己对于设计模式的理解。设计模式的思想对于代码的解耦和灵活性有很大的帮助，尤其是项目做的越来越大的时候，合理的使用设计模式的思想来进行代码结构的设计有利于以后的的扩展和维护。<br><a id="more"></a><br>谈到设计模式，大家肯定最先想到的是单例，毕竟大多数人学习设计模式最先接触的就是单例模式。在平时的软件设计中，单例也占据很重要的地位，例如一个APP中用户个人信息就可以使用单例来进行维护等等。接下来就说说我对于单例的理解。</p>
<p>单例的实现方式有很多种，个人看来，不管怎么变，都离不开以下四种方式。</p>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 饿汉模式</div><div class="line"> *</div><div class="line"> * @author Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class Singleton_3 &#123;</div><div class="line">	private static final Singleton_3 singleton = new Singleton_3();</div><div class="line"></div><div class="line">	private Singleton_3() &#123;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	public static Singleton_3 getInstance() &#123;</div><div class="line">		return singleton;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>饿汉式简单易懂，不过在类初始化的时候就会被实例化，但可能此时并没有用到它，比较浪费内存。</p>
<h2 id="饱汉式（双重校验锁）"><a href="#饱汉式（双重校验锁）" class="headerlink" title="饱汉式（双重校验锁）"></a>饱汉式（双重校验锁）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 饱汉模式</div><div class="line"> *</div><div class="line"> * @author Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class Singleton_4 &#123;</div><div class="line">	private static volatile Singleton_4 singleton;</div><div class="line"></div><div class="line">	private Singleton_4() &#123;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	public static Singleton_4 getInstance() &#123;</div><div class="line">		if (singleton == null) &#123;</div><div class="line">			synchronized (Singleton_4.class) &#123;</div><div class="line">				if (singleton == null) &#123;</div><div class="line">					singleton = new Singleton_4();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return singleton;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>饱汉式实现了lazyload，但是考虑到线程安全和效率问题还是要使用双重校验锁来实现。注意这里单例要加上volatile关键字，否则可能会造成双重校验锁失效问题。</p>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 静态内部类模式</div><div class="line"> *</div><div class="line"> * @author Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class Singleton_1 &#123;</div><div class="line">	private Singleton_1() &#123;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	private static class SingletonHolder &#123;</div><div class="line">		private static final Singleton_1 singleton = new Singleton_1();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static final Singleton_1 getInstance() &#123;</div><div class="line">		return SingletonHolder.singleton;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>静态内部类也实现了lazyload，不过它的优点在于避免了线程锁的校验，效率比较高，综合来看，比前两种方式都要好。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 枚举实现</div><div class="line"> *</div><div class="line"> * @author Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line">public enum Singleton_2 &#123;</div><div class="line">	INSTANCE;</div><div class="line">	public void whatEverYouWant() &#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>枚举实现单例应该是最简单的了吧，而且枚举实现的单例无法被破坏，个人感觉实现单例的最佳方式。</p>
<h2 id="问题和对策"><a href="#问题和对策" class="headerlink" title="问题和对策"></a>问题和对策</h2><p>前三种方法通过反射、序列化和克隆均可以破坏其单例性，具体破坏代码的实现就不再赘述，大家可以自己试一试，这里只针对这几种破坏单例的方式给出对策。就拿第一种单例实现方式来举例吧。<br>避免单例被反射破坏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Singleton_3 &#123;</div><div class="line">	private static boolean flag = false;</div><div class="line">	private static final Singleton_3 singleton = new Singleton_3();</div><div class="line"></div><div class="line">	private Singleton_3() &#123;</div><div class="line">		synchronized (Singleton_3.class) &#123;//加锁是为了防止多个线程同时利用反射进行实例的创建时产生的问题</div><div class="line">			if (!flag) &#123;</div><div class="line">				flag = true;</div><div class="line">			&#125; else &#123;</div><div class="line">				throw new RuntimeException(&quot;单例模式被破坏...&quot;);//利用反射创建实例的时候直接抛出异常</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	public static Singleton_3 getInstance() &#123;</div><div class="line">		return singleton;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>避免单例被序列化破坏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Singleton_3 implements Serializable&#123;</div><div class="line">	private static final Singleton_3 singleton = new Singleton_3();</div><div class="line"></div><div class="line">	private Singleton_3() &#123;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	public static Singleton_3 getInstance() &#123;</div><div class="line">		return singleton;</div><div class="line">	&#125;</div><div class="line">	private Object readResolve() &#123;</div><div class="line">		return singleton;//在其反序列化的时候直接返回已存在的单例</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>避免单例被克隆破坏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Singleton_3 implements Cloneable&#123;</div><div class="line">	private static final Singleton_3 singleton = new Singleton_3();</div><div class="line"></div><div class="line">	private Singleton_3() &#123;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	public static Singleton_3 getInstance() &#123;</div><div class="line">		return singleton;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	protected Object clone() throws CloneNotSupportedException &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		return singleton;//覆写clone()方法，直接返回已存在的单例</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于单例，就说这么多吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一段时间都没有写博客，感觉自己变懒了，这几天反省了一下，决定写点什么，想了想，准备写一下自己对于设计模式的理解。设计模式的思想对于代码的解耦和灵活性有很大的帮助，尤其是项目做的越来越大的时候，合理的使用设计模式的思想来进行代码结构的设计有利于以后的的扩展和维护。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://forevas.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows下使用MinGW编译FFmpeg</title>
    <link href="https://forevas.github.io/2017/03/20/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8MinGW%E7%BC%96%E8%AF%91FFmpeg/"/>
    <id>https://forevas.github.io/2017/03/20/Windows下使用MinGW编译FFmpeg/</id>
    <published>2017-03-20T15:00:33.000Z</published>
    <updated>2017-08-21T13:56:41.221Z</updated>
    
    <content type="html"><![CDATA[<p>在linux下编译FFmpeg很方便，但在Windows下还是有不少坑的，试了下使用Windows+MinGW编译FFmpeg，过程还是挺顺利的。记录一下(这里针对的平台是Android)。<br><a id="more"></a></p>
<h1 id="下载FFmpeg源码"><a href="#下载FFmpeg源码" class="headerlink" title="下载FFmpeg源码"></a>下载FFmpeg源码</h1><p>首先，去<a href="http://ffmpeg.org/download.html" target="_blank" rel="external">FFmpeg官网</a>下载源码。</p>
<p><img src="download_ffmpeg.png" alt="FFmpeg"></p>
<p>然后解压至任意盘中，解压之后的目录如下。</p>
<p><img src="unzip_ffmpeg.png" alt="Source"></p>
<h1 id="NDK下载"><a href="#NDK下载" class="headerlink" title="NDK下载"></a>NDK下载</h1><p>下载NDK可以通过Android Studio自带的SDK管理工具来进行下载。也可以自行去<a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="external">官网</a>下载解压。</p>
<p><img src="NDK.png" alt="NDK"></p>
<h1 id="MinGW下载配置"><a href="#MinGW下载配置" class="headerlink" title="MinGW下载配置"></a>MinGW下载配置</h1><p> MinGW - Minimalist GNU for Windows-是Windows下模拟Linux运行的库、头文件等的集合。我们编译FFmpeg源码需要用到它。</p>
<p> 点击<a href="https://superb-dca2.dl.sourceforge.net/project/mingw/Installer/mingw-get-setup.exe" target="_blank" rel="external">这里</a>直接下载安装程序，安装过程时长视网速而定。</p>
<p> 安装完成后，打开MinGW Installation Manager,选中Basic Setup，在右边的package中选中如下几项：</p>
<p><img src="MinGW_config.png" alt="MinGW"></p>
<p> 然后点击Installation-&gt;Apply Changes,过一会就ok了。</p>
<p> 到这里，我们的准备工作已经完成了。</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>在之前FFmpeg解压后的文件夹中找到configure文件，将其中的这段代码：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SLIBNAME_WITH_MAJOR=&apos;$(SLIBNAME).$(LIBMAJOR)&apos;</div><div class="line">LIB_INSTALL_EXTRA_CMD=&apos;$$(RANLIB) &quot;$(LIBDIR)/$(LIBNAME)&quot;&apos;</div><div class="line">SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_VERSION)&apos;</div><div class="line">SLIB_INSTALL_LINKS=&apos;$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)&apos;</div></pre></td></tr></table></figure>
<p> 替换为：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SLIBNAME_WITH_MAJOR=&apos;$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)&apos;</div><div class="line">LIB_INSTALL_EXTRA_CMD=&apos;$$(RANLIB) &quot;$(LIBDIR)/$(LIBNAME)&quot;&apos;</div><div class="line">SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_MAJOR)&apos;</div><div class="line">SLIB_INSTALL_LINKS=&apos;$(SLIBNAME)&apos;</div></pre></td></tr></table></figure></p>
<p> 这段代码是控制将来编译生成so库的命名格式，如果按照原来的命名格式编译出来将会是libavcodec.so.57这样的格式，android不能识别，改过之后为libavcodec-57.so，这样就可以了。</p>
<p> 然后在FFmpeg解压后的目录中新建build_android.sh文件，内容如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">NDK=D:/Android/sdk/ndk-bundle</div><div class="line">SYSROOT=$NDK/platforms/android-21/arch-arm/</div><div class="line">TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64</div><div class="line">function build_one</div><div class="line">&#123;</div><div class="line">./configure \</div><div class="line">    --prefix=$PREFIX \</div><div class="line">    --enable-shared \</div><div class="line">    --disable-static \</div><div class="line">    --disable-doc \</div><div class="line">    --disable-ffmpeg \</div><div class="line">    --disable-ffplay \</div><div class="line">    --disable-ffprobe \</div><div class="line">    --disable-ffserver \</div><div class="line">    --disable-avdevice \</div><div class="line">    --disable-doc \</div><div class="line">    --disable-symver \</div><div class="line">    --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \</div><div class="line">    --target-os=linux \</div><div class="line">    --arch=arm \</div><div class="line">    --enable-cross-compile \</div><div class="line">    --sysroot=$SYSROOT \</div><div class="line">    --extra-cflags=&quot;-Os -fpic $ADDI_CFLAGS&quot; \</div><div class="line">    --extra-ldflags=&quot;$ADDI_LDFLAGS&quot; \</div><div class="line">    $ADDITIONAL_CONFIGURE_FLAG</div><div class="line">make clean</div><div class="line">make</div><div class="line">make install</div><div class="line">&#125;</div><div class="line">CPU=arm</div><div class="line">PREFIX=$(pwd)/android/$CPU</div><div class="line">ADDI_CFLAGS=&quot;-marm&quot;</div><div class="line">build_one</div></pre></td></tr></table></figure></p>
<p> 注意要把NDK的位置改为自己本地NDK的位置。然后双击运行 <strong>MinGW安装目录\msys\1.0\msys.bat</strong> 文件，启动MinGW命令行，切换到FFmpeg目录下，运行build_android.sh脚本，开始编译：</p>
<p> <img src="compile.png" alt="compile"></p>
<p> 编译过程有点慢，这个跟电脑的速度有关。大概半小时后，编译完成，FFmpeg目录下多了一个android文件夹：</p>
<p> <img src="android.png" alt="android"></p>
<p> 打开android-&gt;arm-&gt;lib:</p>
<p> <img src="finish.png" alt="finish"></p>
<p>编译成功。至于集成到Android平台，可以查阅官方API文档，通过JNI方式调用相关接口即可。</p>
<p>FFmpeg功能十分强大，很多音视频处理的工作都会用到它，以后还需要深入研究。</p>
<p><img src="girl.jpg" alt="萌妹子"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux下编译FFmpeg很方便，但在Windows下还是有不少坑的，试了下使用Windows+MinGW编译FFmpeg，过程还是挺顺利的。记录一下(这里针对的平台是Android)。&lt;br&gt;
    
    </summary>
    
    
      <category term="FFmpeg" scheme="https://forevas.github.io/tags/FFmpeg/"/>
    
      <category term="MinGW" scheme="https://forevas.github.io/tags/MinGW/"/>
    
  </entry>
  
  <entry>
    <title>搭建Shadowsocks代理服务实现科学上网</title>
    <link href="https://forevas.github.io/2017/03/05/%E6%90%AD%E5%BB%BAShadowsocks%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://forevas.github.io/2017/03/05/搭建Shadowsocks代理服务实现科学上网/</id>
    <published>2017-03-05T08:16:37.000Z</published>
    <updated>2017-03-12T08:29:11.188Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，由于GFW的存在，Google，YouTube等一系列网站被挡在了墙外，这样一来很多优质资源都无法访问。作为一名程序猿，平时工作需要查阅不少资料，用百度很不方便。之前也用过第三方的VPN和免费蓝灯，但是总感觉不安全，而且不是很稳定。而自己除了本职工作之外，平时也喜欢研究一些相关技术，所以就萌生了自己搭建VPN的想法。经过一段时间的折腾，VPN是搭好了，结果发现完全连不上，后来了解到使用PPTP协议的VPN早都被封了。之后经过研究，发现Shadowsocks代理很方便，自己也成功的搭建了服务。这里总结下自己搭建的过程，以供以后参阅：<br><a id="more"></a></p>
<p>先来分析一波原理，没有耐心看的可以直接跳转到搭建过程~~</p>
<h1 id="关于GFW"><a href="#关于GFW" class="headerlink" title="关于GFW"></a>关于GFW</h1><p>GFW(Great Firewall of China)是一套建立在我国骨干网国际出口上的网络内容检测和过滤系统，国内所有的运营商的流量最后全部都要接入GFW的机房之后才能够出国。这套系统功能就是过滤不和谐的内容,实现的方法主要是IP封锁，DNS劫持和污染，关键字检测等手段。</p>
<p align="center"><img src="/2017/03/05/搭建Shadowsocks代理服务实现科学上网/GFW工作原理.png" alt="GFW工作原理" title="GFW工作原理"></p>

<h2 id="IP封锁："><a href="#IP封锁：" class="headerlink" title="IP封锁："></a>IP封锁：</h2><p>IP封锁是指防火墙维护一张IP黑名单，会将一些不想让你访问的网站的IP收入其中，一旦发现发往黑名单中地址的请求数据包，就直接将其丢弃，这将导致源主机得不到目标主机的及时响应而引发超时，从而达到屏蔽对目标主机的访问的目的。</p>
<h2 id="DNS劫持和污染："><a href="#DNS劫持和污染：" class="headerlink" title="DNS劫持和污染："></a>DNS劫持和污染：</h2><p>DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能反应或访问的是假网址。</p>
<p>域名服务器缓存污染（DNS cache pollution），又称域名服务器缓存投毒（DNS cache poisoning），是指一些刻意制造或无意中制造出来的域名服务器封包，把域名指往不正确的IP地址。一般来说，在互联网上都有可信赖的域名服务器，但为减低网络上的流量压力，一般的域名服务器都会把从上游的域名服务器获得的解析记录暂存起来，待下次有其他机器要求解析域名时，可以立即提供服务。一旦有关域名的局域域名服务器的缓存受到污染，就会把域名内的电脑导引往错误的服务器或服务器的网址。</p>
<h2 id="关键字检测"><a href="#关键字检测" class="headerlink" title="关键字检测"></a>关键字检测</h2><p>GFW一旦发现连接有敏感词，就会伪装成连接两方，向真正的对方发送 RST 数据包。由于RST标示复位、可以用来异常的关闭连接。所以收到RST数据包会导致连接关闭，从而达到阻断连接的目的。</p>
<p>所以想要绕过GFW必须克服以上的封锁手段。</p>
<h1 id="关于VPN"><a href="#关于VPN" class="headerlink" title="关于VPN"></a>关于VPN</h1><p>虚拟专用网（英语：Virtual Private Network，简称VPN），是一种常用于连接中、大型企业或团体与团体间的私人网络的通讯方法。虚拟私人网络的讯息透过公用的网络架构（例如：互联网）来传送内联网的网络讯息。它利用已加密的通道协议（Tunneling Protocol）来达到保密、发送端认证、消息准确性等私人消息安全效果。这种技术可以用不安全的网络（例如：互联网）来发送可靠、安全的消息。</p>
<p align="center"><img src="/2017/03/05/搭建Shadowsocks代理服务实现科学上网/VPN翻墙原理.png" alt="VPN翻墙原理" title="VPN翻墙原理"></p>

<p>上图基本说明了VPN的原理，首先客户端访问VPN服务器(前提是VPN服务器没有被墙)，然后建立加密的数据通道，通道建立之后，用户就可以通过VPN访问目标网站。不过VPN的流量特征很明显，握手阶段依然是明文，导致匹配流量特征很容易。在VPN科学上网这方面，一些地区已经根据VPN的流量特征做出了相应的匹配策略，可以有效封杀VPN了，像我之前用的PPTP协议基本上已经没办法再用了。</p>
<h1 id="关于Socks5"><a href="#关于Socks5" class="headerlink" title="关于Socks5"></a>关于Socks5</h1><p>Socks5是一个代理协议，它工作在OSI七层模型的会话层，它对于上层协议(HTTP,FTP,SMTP等)是透明的，当我们打开本地代理后，本地Socks5客户端会通过事先和服务端协商好的加密协议对请求数据进行加密，这就避免了VPN握手阶段明文的问题，服务器收到请求后解密数据转发给真正的目标服务器，返回的数据也会进行加密再返回，整个通信过程均采用加密通信，至今也没有发现明显的流量特征，因此不会被GFW察觉。</p>
<p align="center"><img src="/2017/03/05/搭建Shadowsocks代理服务实现科学上网/shadowsocks翻墙原理.png" alt="shadowsocks翻墙原理" title="shadowsocks翻墙原理"></p>

<h1 id="关于Shadowsocks"><a href="#关于Shadowsocks" class="headerlink" title="关于Shadowsocks"></a>关于Shadowsocks</h1><p>一款基于Socks5协议实现的软件，分为服务端和客户端，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。</p>
<h1 id="关于锐速"><a href="#关于锐速" class="headerlink" title="关于锐速"></a>关于锐速</h1><p>一款加速软件，原理是通过算法优化TCP的拥塞控制机制，预判并及时重传可能的丢包，从而实现加速的效果。我们搭建好了Socks代理之后会用到它，否则会有点卡。</p>
<p>好了，关于基础的一些理论就研究到这里，废话不多说，开始我们的搭建过程吧。</p>
<h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="创建VPS"><a href="#创建VPS" class="headerlink" title="创建VPS"></a>创建VPS</h2><p>第一步，我们需要租一个位于国外的VPS，这里给大家推荐<a href="https://www.digitalocean.com/" target="_blank" rel="external">DigitalOcean</a>,每个月最低只要5$，而且支持<a href="https://www.paypal.com/cn/home" target="_blank" rel="external">Paypal</a>支付，很方便。</p>
<p>在首页输入账号和密码注册，验证后点击 Create Droplet创建服务器，系统会提示充值，可以使用信用卡支付，若你的信用卡不支持可以选择用<a href="https://www.paypal.com/cn/home" target="_blank" rel="external">Paypal</a>支付(可以想象成支付宝)，没有<a href="https://www.paypal.com/cn/home" target="_blank" rel="external">Paypal</a>账户的话直接去申请一个，绑定一张银联卡，国内大行的卡都可以。然后进行支付即可。<br><img src="注册页面.png" alt="注册页面"></p>
<hr>
<p>支付完成后就可以创建VPS了，点击右上角 Create Droplet，然后选择操作系统，这里我选择的是Ubuntu14.04x64的系统，不要选太高版本，后面要装的锐速不支持太高版本的内核。</p>
<p align="center"><img src="选择操作系统.png" alt="选择操作系统"></p>

<hr>
<p>VPS配置选择，若只用于上网，选最低配置足够了。</p>
<p align="center"><img src="选择服务器配置.png" alt="选择服务器配置"></p>

<hr>
<p>机房位置推荐San Francisco的机房，感觉速度还可以，之前试过New York的，感觉速度一般，大家可以点击<a href="http://speedtest-nyc1.digitalocean.com/" target="_blank" rel="external">这里</a>测一下各个结点的网络状况，选择最适合自己的即可。</p>
<p align="center"><img src="选择机房位置.png" alt="选择机房位置"></p>

<hr>
<p>SSH Key配置，配置了之后可以使用密钥登录，这个比用密码登录的安全系数要高。密钥形式登录的原理是：利用密钥生成器制作一对密钥——一只公钥和一只私钥。将公钥添加到服务器的某个账户上，然后在客户端利用私钥即可完成认证并登录。这里先不讨论这个问题了，下文的链接有生成密钥的方法。直接点击Create即可。</p>
<p align="center"><img src="sshkey配置.png" alt="sshkey配置"></p>

<hr>
<p>到这里后，服务器就创建好了，一定要牢记IP Address，以后登录服务器都要用到它。</p>
<p align="center"><img src="创建完成.png" alt="创建完成.png"></p>


<hr>
<h2 id="登录并初始化"><a href="#登录并初始化" class="headerlink" title="登录并初始化"></a>登录并初始化</h2><p>现在我们已经可以登录这台服务器了。Linux下就不用说了，相信对大家来说都很简单。主要说说Windows，首先我们需要一个Shell终端，Putty、XShell等等都可以，这里我使用了Git(一款免费、开源的分布式版本控制系统)自带的Shell终端，这里不管你使用的是哪种Shell终端，打开命令行后，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh root@your_ip</div></pre></td></tr></table></figure>
<p><code>your_ip</code>换成要换成刚才创建的服务器的IP地址。登录成功后会看到如下界面：</p>
<p align="center"><img src="登录成功.png" alt="登录成功"></p>


<p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># apt-get update</div></pre></td></tr></table></figure></p>
<p>更新软件包列表：</p>
<p align="center"><img src="更新软件包列表.png" alt="更新软件包列表"></p>

<p>官方推荐<a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04" target="_blank" rel="external">这篇教程</a>来提高服务器的安全性，大家有空可以看一下。</p>
<h2 id="配置Socks5代理"><a href="#配置Socks5代理" class="headerlink" title="配置Socks5代理"></a>配置Socks5代理</h2><p>执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># apt-get install python-m2crypto</div><div class="line"># apt-get install python-pip</div><div class="line"># pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p>至此，shadowsocks服务端已经成功安装，然后执行以下命令编辑配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure></p>
<p>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;your_server_ip&quot;,</div><div class="line">    &quot;server_port&quot;:8388,</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;choose_your_password&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将<code>your_server_ip</code>替换为你的服务器IP，<code>choose_your_password</code>替换为自己想要设置的密码(这个密码将用来验证连接者的身份)，然后保存退出。</p>
<p>执行以下命令启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure></p>
<p>想要停止服务则执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ssserver -d stop</div></pre></td></tr></table></figure></p>
<p>至此，socks5代理服务已经配置成功。接下来配置本地代理。</p>
<h2 id="本地代理配置"><a href="#本地代理配置" class="headerlink" title="本地代理配置"></a>本地代理配置</h2><p>点击<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="external">这里</a>下载Shadowsocks客户端，这里只说下windows下的配置方法，下载完之后运行，配置如下：</p>
<p></p><p align="center"><img src="本地配置.png" alt="本地配置"></p><br>输入服务器的IP地址，还有和服务器端约定好的端口和密码，保持加密方式一致，点击确定，右键右下角图标开启系统代理，现在我们已经可以访问Google、Facebook、Twitter等网站了。手机端可以去Google Play下载影梭，配置方法同上。<p></p>
<p></p><p align="center"><img src="google.png" alt="Google"></p><br>如果只是看看网页查查资料的话现在已经足够了，不过若是想上Youtube看高清视频仅仅这样还是不够的，接下来说下锐速的配置过程。<p></p>
<h1 id="锐速加速"><a href="#锐速加速" class="headerlink" title="锐速加速"></a>锐速加速</h1><p>首先得确定我们的VPS究竟是采用了哪种虚拟化技术，openvz 还是 kvm 还是 xen 或者是 vmare，如果是openvz，那么很遗憾，锐速不支持openvz。具体查看方法之前试了好几种，感觉这种方法比较靠谱，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ifconfig</div></pre></td></tr></table></figure></p>
<p>查看网卡信息，openvz的一般都是venet0:<em> ，xen、kvm的一般都是eth</em>。</p>
<p></p><p align="left"><img src="网卡信息.png" alt="网卡信息"></p><br>然后查看系统内核信息，这个在我们每次登录服务器的欢迎界面就可以看到：<p></p>
<p></p><p align="left"><img src="系统内核.png" alt="系统内核"></p><br>因为锐速对于某些版本的内核是不支持的，可以在<a href="https://www.91yun.org/serverspeeder91yun" target="_blank" rel="external">这里</a>查看自己的系统内核是否支持。<br>如果不支持的话就要更换系统内核了，更换系统内核的方法可以参考<a href="https://blessing.studio/ubuntu-14-04-change-kernel-to-install-serverspeeder/" target="_blank" rel="external">这篇教程</a>，这里不再赘述。<p></p>
<p>假设现在你的系统内核已经可以支持锐速，那么执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</div></pre></td></tr></table></figure></p>
<p>如果内核完全匹配就会自动下载安装。</p>
<p>接下来执行以下命令重启锐速：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># service serverSpeeder restart</div></pre></td></tr></table></figure></p>
<p>配置完成。打开YouTube，随便点开一个视频：</p>
<p></p><p align="center"><img src="YouTube.png" alt="YouTube"></p><br>720P,无压力。<p></p>
<p>至此，全部配置过程完成。第一次正式写博客，居然写了这么长…<br><img src="亚丝娜.jpg" alt="亚丝娜"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E" target="_blank" rel="external">虚拟专用网</a><br><a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E7%A7%81%E4%BA%BA%E7%B6%B2%E8%B7%AF" target="_blank" rel="external">防火长城</a><br><a href="http://www.people.virginia.edu/~tq7bw/vpn/" target="_blank" rel="external">建立自己的VPN服务器</a><br><a href="https://www.91yun.org/archives/683" target="_blank" rel="external">锐速破解版linux一键自动安装包</a><br><a href="https://www.freehao123.com/vps-ssh/" target="_blank" rel="external">Ubuntu 14.04 更换内核以安装锐速</a><br><a href="https://www.freehao123.com/vps-ssh/" target="_blank" rel="external">增强VPS安全</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，由于GFW的存在，Google，YouTube等一系列网站被挡在了墙外，这样一来很多优质资源都无法访问。作为一名程序猿，平时工作需要查阅不少资料，用百度很不方便。之前也用过第三方的VPN和免费蓝灯，但是总感觉不安全，而且不是很稳定。而自己除了本职工作之外，平时也喜欢研究一些相关技术，所以就萌生了自己搭建VPN的想法。经过一段时间的折腾，VPN是搭好了，结果发现完全连不上，后来了解到使用PPTP协议的VPN早都被封了。之后经过研究，发现Shadowsocks代理很方便，自己也成功的搭建了服务。这里总结下自己搭建的过程，以供以后参阅：&lt;br&gt;
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="https://forevas.github.io/tags/Shadowsocks/"/>
    
      <category term="Socks5" scheme="https://forevas.github.io/tags/Socks5/"/>
    
      <category term="VPS" scheme="https://forevas.github.io/tags/VPS/"/>
    
      <category term="GFW" scheme="https://forevas.github.io/tags/GFW/"/>
    
      <category term="锐速" scheme="https://forevas.github.io/tags/%E9%94%90%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://forevas.github.io/2017/01/08/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://forevas.github.io/2017/01/08/新的开始/</id>
    <published>2017-01-08T15:05:14.000Z</published>
    <updated>2017-08-22T15:19:40.404Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到很多个人博客，不仅内容优秀，而且布局精美。所以一直想着自己也搞一个个人博客，奈何因为工作原因和自己比较懒，一直没有下决心去做。好在最近发现了hexo，其简洁性和实用性深深地吸引了我，历经N久的瞎折腾，个人博客终于搭建好了，看着自己的劳动成果，感觉自己花费的时间也没有白费。下定决心，从今天开始，开始写博客。<br><a id="more"></a><br>下面是一些常用的语法：</p>
<h1 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h1><p>在文章中插入引言，可包含作者、来源和标题。</p>
<h2 id="别号：-quote"><a href="#别号：-quote" class="headerlink" title="别号： quote"></a>别号： quote</h2><blockquote><p>content</p>
<footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>没有提供参数，则只输出普通的 blockquote<br><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote></p>
<h2 id="引用书上的句子"><a href="#引用书上的句子" class="headerlink" title="引用书上的句子"></a>引用书上的句子</h2><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<h2 id="引用-Twitter"><a href="#引用-Twitter" class="headerlink" title="引用 Twitter"></a>引用 Twitter</h2><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<h2 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a>引用网络上的文章</h2><blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>在文章中插入代码。<br>别名： code<br><figure class="highlight plain"><figcaption><span>[title] [] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">code snippet</div></pre></td></tr></table></figure></p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h2><p>普通的代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure><br>指定语言<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div></pre></td></tr></table></figure><br>附加说明<br><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.map(callback[, thisArg])</div></pre></td></tr></table></figure><br>附加说明和网址<br><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class="line">=&gt; [1, 2, 3]</div></pre></td></tr></table></figure></p>
<h1 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h1><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>
<p><code>[language] [title] [url] [link text] code snippet</code></p>
<h1 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h1><p>在文章中插入 Pull quote。<br><blockquote class="pullquote [class]"><p>content</p>
</blockquote></p>
<h1 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h1><p>在文章中嵌入 jsFiddle。<br><iframe scrolling="no" width="[width]" height="[height]" src="http://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" allowfullscreen></iframe></p>
<h1 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h1><p>在文章中嵌入 Gist。<br><script src="//gist.github.com/gist_id.js?file=[filename]"></script></p>
<h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><p>在文章中插入 iframe。<br><iframe src="url" width="[width]" height="[height]" frameborder="0" allowfullscreen></iframe></p>
<h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>在文章中插入指定大小的图片。<br><img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]"></p>
<h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。<br><a>text url [external] [title]</a></p>
<h1 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h1><p>插入 source 文件夹内的代码文件。<br></p>
<h1 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h1><p>在文章中插入 Youtube 视频。<br><div class="video-container"><iframe src="//www.youtube.com/embed/video_id" frameborder="0" allowfullscreen></iframe></div></p>
<h1 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h1><p>在文章中插入 Vimeo 视频。<br><div class="video-container"><iframe src="//player.vimeo.com/video/video_id" frameborder="0" allowfullscreen></iframe></div></p>
<h1 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h1><p>引用其他文章的链接。<br><br></p>
<h1 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h1><p>引用文章的资源。<br><br><br></p>
<h1 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h1><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br>
content
</p>
<blockquote>
<p>Every interaction is both precious and an opportunity to delight.</p>
</blockquote>
<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><p>$$J_\alpha(x)=\sum _{m=0}^\infty \frac{(-1)^ m}{m! \, \Gamma (m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha }$$</p>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p align="center"><font size="6">我是居中变大的字</font></p>

<p>比较了一下，感觉Markdown语法和swing语法混合使用体验最好，各取所长吧。</p>
<p><img src="saber.jpg" alt="saber"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo文档</a><br><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown语法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前看到很多个人博客，不仅内容优秀，而且布局精美。所以一直想着自己也搞一个个人博客，奈何因为工作原因和自己比较懒，一直没有下决心去做。好在最近发现了hexo，其简洁性和实用性深深地吸引了我，历经N久的瞎折腾，个人博客终于搭建好了，看着自己的劳动成果，感觉自己花费的时间也没有白费。下定决心，从今天开始，开始写博客。&lt;br&gt;
    
    </summary>
    
    
      <category term="Test" scheme="https://forevas.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://forevas.github.io/2017/01/02/hello-world/"/>
    <id>https://forevas.github.io/2017/01/02/hello-world/</id>
    <published>2017-01-02T14:34:29.808Z</published>
    <updated>2017-03-07T15:10:39.865Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="hello world" scheme="https://forevas.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
